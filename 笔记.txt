1、web容器在启动的时候，会扫描每个jar包下的META-INF/services/javax.servlet.ServletContainerInitializer

2、加载这个文件指定的类SpringServletContainerInitializer(位于：spring-web-xxx.jar/META-INF/services/javax.servlet.ServletContainerInitializer)

3、Spring的应用在启动的时候会加载WebApplicationInitializer接口下的所有组件；

4、为WebApplicationInitializer组件创建对象（组件不是接口，不是抽象类）
	1）、AbstractContextLoaderInitializer：
		（1）、创建根容器；createRootApplicationContext()；
		（2）、创建ContextLoaderListener监听器
	2）、AbstractDispatcherServletInitializer：
		（1）、创建一个web的ioc容器；createServletApplicationContext();
		（2）、创建了DispatcherServlet；createDispatcherServlet()；
		（3）、将创建的DispatcherServlet添加到ServletContext中，并进行映射getServletMappings();
		（4）、如果有Filter过滤器，则进行Filter过滤器的注册（CharacterEncodingFilter等等...）；
	3）、AbstractAnnotationConfigDispatcherServletInitializer：注解方式配置的DispatcherServlet初始化器
		（1）、创建根容器：createRootApplicationContext()
				getRootConfigClasses();获取Spring的配置类
		（2）、创建web的ioc容器： createServletApplicationContext();
				getServletConfigClasses();获取SpringMvc的配置类
	
总结：
	以注解方式来启动SpringMVC；继承AbstractAnnotationConfigDispatcherServletInitializer；
实现抽象方法指定DispatcherServlet的配置信息；

===========================
定制SpringMVC；
1）、@EnableWebMvc:开启SpringMVC定制配置功能；
	<mvc:annotation-driven/>；

2）、配置组件（视图解析器、视图映射、静态资源映射、拦截器。。。）
	extends WebMvcConfigurerAdapter



			
	